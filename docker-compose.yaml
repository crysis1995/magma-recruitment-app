version: "2.1"
services:
    mongo:
        image: mongo:7
        container_name: "mongo"
        ports:
            - "27017:27017"
        networks:
            - default_network
    rabbitmq:
        image: rabbitmq:3.12-management
        container_name: "rabbitmq"
        ports:
            - "5672:5672"
            - "15672:15672"
        volumes:
            - ./.docker/rabbitmq/data/:/var/lib/rabbitmq/
            - ./.docker/rabbitmq/log/:/var/log/rabbitmq
        networks:
            - default_network
        healthcheck:
            test: rabbitmq-diagnostics -q ping
            interval: 10s
            timeout: 10s
            retries: 5
    user-service:
        build:
            context: ./user-service
            dockerfile: Dockerfile
            no_cache: true
        ports:
            - "3000:3000"
        depends_on:
            rabbitmq:
                condition: service_healthy
            mongo:
                condition: service_started
        healthcheck:
            test: $(curl http://localhost:3000/health/ | jq -r '.isHealth') = 'true' && exit 0 || exit 1
            interval: 30s
            timeout: 10s
            retries: 5
        restart: on-failure
        links:
            - rabbitmq
            - mongo
        networks:
            - default_network
    notification-service:
        build:
            context: ./notification-service
            dockerfile: Dockerfile
            no_cache: true
        ports:
            - "3001:3001"
        depends_on:
            rabbitmq:
                condition: service_healthy
            user-service:
                condition: service_healthy
        restart: on-failure
        links:
            - rabbitmq
        healthcheck:
            test: $(curl http://localhost:3001/health/ | jq -r '.isHealth') = 'true' && exit 0 || exit 1
            interval: 30s
            timeout: 10s
            retries: 5
        networks:
            - default_network
networks:
    default_network:
        driver: bridge
